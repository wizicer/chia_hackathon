(mod (
    RESERVED_PASSWORD
    popchia_genesis
    popchia_puzhash
    password
    consumer_puzhash
    popchia_amount
    consumer_amount
    coin_id
    )

    (include curry.clvm)
    (include sha256tree.clvm)
    (include condition_codes.clvm)
    
    ; "assert" is a macro that wraps repeated instances of "if"
    ; usage: (assert A0 A1 ... An R)
    ; all of A0, A1, ... An must evaluate to non-null, or an exception is raised
    ; return the value of R (if we get that far)

    (defmacro assert items
        (if (r items)
            (list if (f items) (c assert (r items)) (q . (x)))
            (f items)
        )
    )

    (defmacro or args
        (if args
            (qq (if (unquote (f args))
                    1
                    (unquote (c or (r args)))))
            0))

    ; RESERVED_PASSWORD would be curried in before hash, create two coins, one is going to consumer,
    ; one is continue the popchia game until all amount is distributed.

    (defun assert_popchia (
        RESERVED_PASSWORD
        popchia_genesis
        popchia_puzhash
        password
        consumer_puzhash
        popchia_amount
        consumer_amount
        coin_id
    )
        (if (= (sha256 password) RESERVED_PASSWORD)
            (list 
                (list CREATE_COIN consumer_puzhash consumer_amount)
                (if (> popchia_amount 0)
                    (list CREATE_COIN popchia_puzhash popchia_amount)
                    ()
                )
                (list ASSERT_MY_COIN_ID coin_id)
            )
            (x)
        )
    )

    ; make sure next coin is same type of coin

    (defun correct_popchia_genesis (popchia_genesis popchia_puzhash)
        (=  (or (= (sha256tree assert_popchia) popchia_genesis)
                (= (sha256tree curry assert_popchia popchia_genesis) popchia_puzhash)
            )
        )
    )

    (defconstant AMOUNT_MASK (q . 0x00000000000000000000000000000000000000000000000000000000000000ff))

    (defun get_amount_from_coin_id (coin_id)
        (logand coin_id AMOUNT_MASK)
    )

    ; judge if correct amount provided which is according to coin_id

    (defun correct_amount (consumer_amount amount)
        (=  (or (= amount consumer_amount)
                (> amount consumer_amount)
            )
        )
    )

    ; main entry point

    (assert
        (
            (correct_popchia_genesis popchia_genesis popchia_puzhash)
            (correct_amount consumer_amount (get_amount_from_coin_id coin_id))
            (assert_popchia
                RESERVED_PASSWORD
                popchia_genesis
                popchia_puzhash
                password
                consumer_puzhash
                popchia_amount
                consumer_amount
                coin_id
            )
        )
    )

)
